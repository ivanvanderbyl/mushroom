{"name":"Mushroom","body":"# Mushroom\r\n\r\nMushroom is a super simple wrapper around ActiveSupport Instrumentation introduced in Rails 3.\r\n\r\nMushroom allows any component of your application to trigger events which later get subscribed to by any\r\nother component in your application.\r\n\r\nThe returned event can be used to handle follow up behaviour, profile running code, and event dispatch requests to\r\nother services.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'mushroom'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install mushroom\r\n\r\n## Usage\r\n\r\n**Simple example: Dispatch an event and receive it somewhere else**\r\n\r\n```ruby\r\n\r\n# app/models/server.rb\r\nclass Server\r\n  include Mushroom\r\n\r\n  def run\r\n    notify :start #=> Dispatches a 'server:start' event with the current server instance as the event target.\r\n  end\r\nend\r\n\r\n# lib/my_app/event_handler.rb\r\nclass EventHandler < Mushroom::Subscriber\r\n  events :start, :on => Server\r\n\r\n  def notify\r\n    # Handle event here\r\n    puts name     #=> \"server:start\"\r\n    puts target   #=> <Server id:1 ...>\r\n    puts duration #=> 0.001\r\n  end\r\nend\r\n\r\nServer.new.run\r\n```\r\n\r\n**Slightly more advanced example: Instrument a method running, and display its duration:**\r\n\r\n```ruby\r\nclass Server\r\n  include Mushroom\r\n\r\n  def start\r\n    sleep 1\r\n  end\r\n  instrument :start\r\nend\r\n\r\n# lib/my_app/event_handler.rb\r\nclass EventHandler < Mushroom::Subscriber\r\n  events :start, :on => Server\r\n\r\n  def notify\r\n    # Handle event here\r\n    puts name     #=> \"server:start\"\r\n    puts target   #=> <Server id:1 ...>\r\n    puts duration #=> 1000.0\r\n  end\r\nend\r\n\r\nServer.new.start\r\n```\r\n\r\n**Subscribing to multiple events:**\r\n\r\n```ruby\r\n# lib/my_app/event_handler.rb\r\nclass EventHandler < Mushroom::Subscriber\r\n  events :start, :stop, :destroy, :on => Server\r\nend\r\n```\r\n\r\n**Subscribing events to multiple targets**\r\n\r\n```ruby\r\n# lib/my_app/event_handler.rb\r\nclass EventHandler < Mushroom::Subscriber\r\n  events :create, :destroy, :on => [Server, User, Account]\r\nend\r\n```\r\n\r\n**Passing extra parameters to the subscriber**\r\n\r\n```ruby\r\nclass Server\r\n  include Mushroom\r\n\r\n  def start\r\n    notify :start, Time.now\r\n  end\r\nend\r\n\r\n# lib/my_app/event_handler.rb\r\nclass EventHandler < Mushroom::Subscriber\r\n  events :start, :on => Server\r\n\r\n  def notify(started_at)\r\n    puts started_at #=> 2012-04-26 16:56:54 +1000\r\n  end\r\nend\r\n\r\nServer.new.start\r\n```\r\n\r\nRemember to declare all the arguments you expect to be received in `#notify` or you won't receive them all. You can also get the same\r\narguments from the `#payload` method.\r\n\r\n## Subscriber API\r\n\r\nThe following methods are available on your Subscriber subclass:\r\n\r\n```ruby\r\n# payload\r\n# name\r\n# time\r\n# transaction_id\r\n# duration\r\n```\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n# Author\r\n\r\n- Ivan Vanderbyl\r\n","tagline":"Super simple notification service for dispatching and responding to events within your application using a fanout exchange","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}